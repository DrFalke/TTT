import socket
import pickle
import tkinter as tk
from threading import Thread

class TicTacToeClient:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic Tac Toe Client")
        self.create_widgets()
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.client_socket.connect(('127.0.0.1', 65432))
        Thread(target=self.receive_state).start()
        self.initialize_game()

    def create_widgets(self):
        self.buttons = [tk.Button(self.master, text=' ', font='Arial 20', width=5, height=2,
                                  command=lambda i=i: self.make_move(i)) for i in range(9)]
        for i, button in enumerate(self.buttons):
            row, col = divmod(i, 3)
            button.grid(row=row, column=col)
        self.status_label = tk.Label(self.master, text="Connecting to server...")
        self.status_label.grid(row=3, column=0, columnspan=3)
        self.reset_button = tk.Button(self.master, text="New Game", state=tk.DISABLED, command=self.reset_game)
        self.reset_button.grid(row=4, column=0, columnspan=3)

    def initialize_game(self):
        self.board = [' ' for _ in range(9)]
        self.current_turn = None
        self.winner = None

    def make_move(self, index):
        if self.board[index] == ' ' and self.current_turn == 'O':
            self.board[index] = 'O'
            self.client_socket.sendall(pickle.dumps((index, 'O')))
            self.update_buttons()

    def update_buttons(self):
        for i, button in enumerate(self.buttons):
            button.config(text=self.board[i], state=tk.DISABLED if self.board[i] != ' ' else tk.NORMAL)
        if self.current_turn == 'O' and not self.winner:
            for i, button in enumerate(self.buttons):
                if self.board[i] == ' ':
                    button.config(state=tk.NORMAL)
        else:
            for button in self.buttons:
                button.config(state=tk.DISABLED)

    def receive_state(self):
        while True:
            data = self.client_socket.recv(4096)
            if not data:
                break
            state = pickle.loads(data)
            if state == 'reset':
                self.initialize_game()
            else:
                self.update_state(state)
            self.update_buttons()

    def update_state(self, state):
        self.board, self.current_turn, self.winner = state
        for i, button in enumerate(self.buttons):
            button.config(text=self.board[i])
        self.status_label.config(text=f"Current turn: {self.current_turn}")
        if self.winner:
            self.status_label.config(text=f"Winner: {self.winner}" if self.winner != 'Draw' else "It's a draw!")
            for button in self.buttons:
                button.config(state=tk.DISABLED)
            self.reset_button.config(state=tk.NORMAL)  # Move this line here
        else:
            self.reset_button.config(state=tk.NORMAL)  # Add this line here
            self.update_buttons()

    def reset_game(self):
        self.initialize_game()
        self.update_buttons()
        self.status_label.config(text="Connecting to server...")
        self.reset_button.config(state=tk.DISABLED)
        self.client_socket.sendall(pickle.dumps('reset'))

if __name__ == "__main__":
    root = tk.Tk()
    client = TicTacToeClient(root)
    root.mainloop()
