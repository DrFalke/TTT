import socket
import pickle
import tkinter as tk
from threading import Thread

class TicTacToeServer:
    def __init__(self, master):
        self.master = master
        self.master.title("Tic Tac Toe Server")
        self.create_widgets()
        self.initialize_game()
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind(('127.0.0.1', 65432))
        self.server_socket.listen(1)
        Thread(target=self.wait_for_client).start()
        
    def create_widgets(self):
        self.buttons = [tk.Button(self.master, text=' ', font='Arial 20', width=5, height=2,
                                  command=lambda i=i: self.make_move(i)) for i in range(9)]
        for i, button in enumerate(self.buttons):
            row, col = divmod(i, 3)
            button.grid(row=row, column=col)
        self.status_label = tk.Label(self.master, text="Waiting for client to connect...")
        self.status_label.grid(row=3, column=0, columnspan=3)
        self.reset_button = tk.Button(self.master, text="New Game", state=tk.DISABLED, command=self.reset_game)
        self.reset_button.grid(row=4, column=0, columnspan=3)

    def initialize_game(self):
        self.board = [' ' for _ in range(9)]
        self.current_turn = 'X'
        self.winner = None

    def wait_for_client(self):
        self.client_socket, self.client_address = self.server_socket.accept()
        self.status_label.config(text=f"Client connected from {self.client_address}")
        Thread(target=self.receive_state).start()
        self.update_buttons()

    def make_move(self, index):
        if self.board[index] == ' ' and self.current_turn == 'X':
            self.board[index] = 'X'
            if self.check_winner('X'):
                self.winner = 'X'
            elif self.check_draw():
                self.winner = 'Draw'
            self.current_turn = 'O'
            self.update_buttons()
            self.send_state()

    def update_buttons(self):
        for i, button in enumerate(self.buttons):
            button.config(text=self.board[i], state=tk.DISABLED if self.board[i] != ' ' else tk.NORMAL)
        if self.winner:
            self.status_label.config(text=f"Winner: {self.winner}" if self.winner != 'Draw' else "It's a draw!")
            for button in self.buttons:
                button.config(state=tk.DISABLED)
            self.reset_button.config(state=tk.NORMAL)
        else:
            self.status_label.config(text=f"Current turn: {self.current_turn}")

    def receive_state(self):
        while True:
            data = self.client_socket.recv(4096)
            if not data:
                break
            move = pickle.loads(data)
            if move == 'reset':
                self.initialize_game()
            else:
                self.process_move(move)
            self.update_buttons()

    def process_move(self, move):
        index, player = move
        if self.board[index] == ' ' and player == self.current_turn:
            self.board[index] = player
            if self.check_winner(player):
                self.winner = player
            elif self.check_draw():
                self.winner = 'Draw'
            self.current_turn = 'X'
            
    def check_winner(self, player):
        win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                          (0, 3, 6), (1, 4, 7), (2, 5, 8),
                          (0, 4, 8), (2, 4, 6)]
        for condition in win_conditions:
            if all(self.board[i] == player for i in condition):
                return True
        return False

    def check_draw(self):
        return all(space != ' ' for space in self.board)

    def send_state(self):
        state = (self.board, self.current_turn, self.winner)
        self.client_socket.sendall(pickle.dumps(state))

    def reset_game(self):
        self.initialize_game()
        self.update_buttons()
        self.status_label.config(text="Current turn: X")
        self.reset_button.config(state=tk.DISABLED)
        self.send_state()

if __name__ == "__main__":
    root = tk.Tk()
    server = TicTacToeServer(root)
    root.mainloop()
