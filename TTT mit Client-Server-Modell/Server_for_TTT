"""
Tic Tac Toe Server:
Der Server beinhaltet die Spiellogik von Tic Tac Toe.
Das bedeutet, dass der Server die Spielzüge überprüft und den Gewinner ermittelt.
Dadurch das der Client keine Spiellogik hat, müssen die Spieldaten zum Server gesendet werden.
Dieser wertet die Daten aus und schickt die Ergebnisse dem Client zurück.
Dies ist nötig damit auf beiden Seiden die GUI aktualisiert wird und der Spielstand synchron ist.
"""


import socket
import pickle # pickle für Datenübertragung
import tkinter as tk
from threading import Thread

class TicTacToeServer:
    def __init__(self, master):
        self.master = master # Hauptfenster
        self.master.title("Tic Tac Toe Server")
        self.create_widgets() # Erstellt die Widgets (Buttons, Label, etc.)
        self.initialize_game() # Spiel initialisieren 
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) #Sock_Stream für TCP
        self.server_socket.bind(('localhost', 8080))
        self.server_socket.listen(1)
        Thread(target=self.wait_for_client).start() # Thread für die Verbindungsaufnahme
        
    def create_widgets(self):
        self.buttons = [tk.Button(self.master, text=' ', font='Arial 20', width=8, height=4,
                                command=lambda i=i: self.make_move(i)) for i in range(9)] # Erstellt die Buttons; Lambda Funktion für die Übergabe des Index (anonyme Funktion)
        for i, button in enumerate(self.buttons):
            row, col = divmod(i, 3) # Buttons richtig platzieren (3x3 Raster)
            button.grid(row=row, column=col)
        self.status_label = tk.Label(self.master, text="Waiting for client to connect...", font=('Arial', 14))
        self.status_label.grid(row=3, column=0, columnspan=3)
        self.reset_button = tk.Button(self.master, text="Reset", font=('Arial', 10), state=tk.DISABLED, command=self.reset_game, width=7, height=2)
        self.reset_button.grid(row=4, column=0, columnspan=3)

    def initialize_game(self): #Leeres Spielfeld ausgeben
        self.board = [' ' for _ in range(9)]
        self.current_turn = 'X'
        self.winner = None
        self.winning_combination = [] # Gewinnkombinationen 

    def wait_for_client(self): #Wartet auf eine Verbindung vom Client 
        self.client_socket, self.client_address = self.server_socket.accept()
        self.status_label.config(text=f"Client connected from {self.client_address}")
        Thread(target=self.receive_state).start() #Thread wird gestartet, wenn die Verbindung hergestellt wurde
        self.update_buttons() # Buttons werden aktualisiert

    def make_move(self, index):
        if self.board[index] == ' ' and self.current_turn == 'X': #Wenn das Feld leer ist und der aktuelle Zug X ist
            self.board[index] = 'X'
            if self.check_winner('X'):
                self.winner = 'X' #Wenn X gewinnt
            elif self.check_draw():
                self.winner = 'Draw' #Wenn es ein Unentschieden gibt
            self.current_turn = 'O' #Nächster Zug ist O
            self.update_buttons()
            self.send_state()

    def update_buttons(self): #Aktualisiert die Buttons
        for i, button in enumerate(self.buttons): #Für jeden Button
            button.config(text=self.board[i], state=tk.DISABLED if self.board[i] != ' ' else tk.NORMAL, bg='SystemButtonFace') #Text wird gesetzt, Button wird deaktiviert, wenn das Feld nicht leer ist
        if self.winner:
            #Gewinner wird angezeigt
            self.status_label.config(text=f"Winner: {self.winner}", font=('Arial', 20, 'bold')) if self.winner != 'Draw' else self.status_label.config(text="It's a draw!", font=('Arial', 10, 'bold')) 
            for button in self.buttons:
                button.config(state=tk.DISABLED)
            for index in self.winning_combination:
                self.buttons[index].config(bg='green') #Gewinnkombination wird hervorgehoben (Grünes Feld)
            self.reset_button.config(state=tk.NORMAL) #Reset Button wird aktiviert
        else:
            #Aktueller Zug wird angezeigt
            self.status_label.config(text=f"Current turn: {self.current_turn}", font=('Arial', 13, 'normal'))

    def receive_state(self): #Empfängt den Spielstatus
        while True:
            data = self.client_socket.recv(4096) #Daten werden empfangen (max. 4096 Bytes)
            if not data:
                break
            move = pickle.loads(data) #Daten werden geladen
            if move == 'reset':
                self.initialize_game() #Spiel wird zurückgesetzt
            else:
                self.process_move(move) #Zug wird verarbeitet
            self.update_buttons() #Buttons werden aktualisiert

    def process_move(self, move): #process_move wird aufgerufen, wenn ein Zug empfangen wird
        index, player = move #Index und Spieler werden übergeben
        if self.board[index] == ' ' and player == self.current_turn: #Wenn das Feld leer ist und der Spieler am Zug ist
            self.board[index] = player
            if self.check_winner(player): #Wenn der Spieler gewinnt
                self.winner = player
            elif self.check_draw(): #Wenn es ein Unentschieden gibt
                self.winner = 'Draw'
            self.current_turn = 'X'
            self.send_state()
    
    def check_winner(self, player): #Überprüft, ob ein Spieler gewonnen hat
        win_conditions = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                          (0, 3, 6), (1, 4, 7), (2, 5, 8),
                          (0, 4, 8), (2, 4, 6)]
        for condition in win_conditions:
            if all(self.board[i] == player for i in condition): #Wenn alle Felder in einer Gewinnkombination vom Spieler belegt sind
                self.winning_combination = condition # Gewinnkombination wird gespeichert
                return True
        return False
    
    def check_draw(self):
        return all(space != ' ' for space in self.board) # Wenn alle Felder belegt sind, gibt es ein Unentschieden

    def send_state(self):
        state = (self.board, self.current_turn, self.winner, self.winning_combination) # Spielstatus wird übergeben
        self.client_socket.sendall(pickle.dumps(state))

    def reset_game(self): # Spiel zurücksetzen
        self.initialize_game()
        self.update_buttons()
        self.status_label.config(text="Current turn: X")
        self.reset_button.config(state=tk.DISABLED)
        reset_massage = 'reset'
        self.client_socket.sendall(pickle.dumps(reset_massage))
        self.send_state()

if __name__ == "__main__": # Main Methode für sicheren Start 
    root = tk.Tk()
    server = TicTacToeServer(root)
    root.mainloop()
